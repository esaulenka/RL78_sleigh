# Bank 0 - General Purpose
define register offset=0x18 size=1 [X0 A0 C0 B0 E0 D0 L0 H0];  # 8-bit
define register offset=0x18 size=2 [AX0 BC0 DE0 HL0];  #16-bit

# Bank 1 - General Purpose
define register offset=0x10 size=1 [X1 A1 C1 B1 E1 D1 L1 H1];  # 8-bit
define register offset=0x10 size=2 [AX1 BC1 DE1 HL1];  #16-bit

# Bank 2 - Callee Preserved
define register offset=0x8 size=1 [X2 A2 C2 B2 E2 D2 L2 H2];  # 8-bit
define register offset=0x8 size=2 [AX2 BC2 DE2 HL2];  #16-bit

# Bank 3 - Reserved for Interrupt Handlers
define register offset=0 size=1 [X3 A3 C3 B3 E3 D3 L3 H3];  # 8-bit
define register offset=0 size=2 [AX3 BC3 DE3 HL3];  #16-bit

define register offset=0x30 size=2 CES;
define register offset=0x30 size=1 [ES0 CS0];

# Special purpose registers
define register offset=0x40 size=3 [PC];
define register offset=0x50 size=2 [SP _  _  _];
define register offset=0x50 size=1 [SPL SPH PSW];

define register offset=0xe0 size=1 [CY ISP0 ISP1 RBS0 AC RBS1 Z IE];

# For storing processor context
define register offset=0x80 size=4 contextreg;
define register offset=0x84 size=1 skipflag;
define register offset=0x85 size=1 bank;

define context contextreg
    es_prefix=(0, 0) noflow
    rsb=(1,2)
    skip_mode=(3,5) noflow
    bank_mode=(6,6);

# CALL Table entries
define ram offset=0x80 size=2 [
    CALLT80 CALLT82 CALLT84 CALLT86
    CALLT88 CALLT8A CALLT8C CALLT8E

    CALLT90 CALLT92 CALLT94 CALLT96
    CALLT98 CALLT9A CALLT9C CALLT9E

    CALLTA0 CALLTA2 CALLTA4 CALLTA6
    CALLTA8 CALLTAA CALLTAC CALLTAE

    CALLTB0 CALLTB2 CALLTB4 CALLTB6
    CALLTB8 CALLTBA CALLTBC CALLTBE
];

define ram offset=0x0 size=2 RESET;
define ram offset=0x4 size=2 [
    INTWDTI INTLVI INTP0 INTP1 INTP2 INTP3 INTP4
    INTP5 INTST2 INTSR2 INTSRE2 INTDMA0 INTDMA1 INTST0 INTSR0
    INTSRE0 INTST1 INTSR1 INTSRE1 INTIICA0 INTTM00 INTTM01 INTTM02
    INTTM03 INTAD INTRTC INTIT INTKR INTST3 INTSR3 INTTM13
    INTTM04 INTTM05 INTTM06 INTTM07 INTP6 INTP7 INTP8 INTP9
    INTP10 INTP11 INTTM10 INTTM11 INTTM12 INTSRE3 INTMD INTIICA1
    INTFL INTDMA2 INTDMA3 INTTM14 INTTM15 INTTM16 INTTM17
];

define ram offset=0x7E size=2 BRK;

define token base (8)
    opcode = (0, 7)
    op_h = (4, 7)
    op_l = (0, 3)
    # Whether an rp (16-bit) register is the data source
    rp_source = (0, 0)
    mov1_sreg   = (7, 7)
    # The n'th bit to use for *1 instructions
    bit_op_n = (4, 6)
    bit_n = (4, 6)
    # Register bank selection also uses the same bits
    # as the bitwise operators
    rbs_op_n = (4, 5)
    # Unused instructions
    clrb_unused = (2, 3)
    movw_op = (3, 3)
    call_rp = (4, 6)
    dreg_word = (1, 2)
    dreg_byte = (0, 2)
    dreg_axbc = (0, 1)
    sreg_byte = (0, 2)
    base_3_3 = (3, 3);

define token base2 (8)
    # Bits 2, 7 is set and Bit 3 is unset for CALLT instructions
    op2_b7       = (7, 7)
    op2_b23      = (2, 3)
    op2_callt_low = (4, 6)
    op2_callt_hi  = (0, 1)
    # NOTE: Many arithmetic instructions that act upon registers
    # alone are decoded by the upper 5 bits of the second byte
    # of the opcode. Ex. XOR 0x78 >> 3 -> 0xf
    op2_h       = (3, 7)
    # Bit arithmetic uses the nibble of the second byte
    # to determine the operation (See SHR)
    op2_l       = (0, 3)
    shift_n     = (4, 7)
    sreg2_byte  = (0, 2);

define token data8 (8)
    data        = (0, 7)
    uaddr8      = (0, 7)
    saddr8      = (0, 7) signed
    sfr_byte    = (0, 7)
    sfr_word    = (0, 7)
    fixed_sfr_offset = (3, 7)
    fixed_sfr   = (0, 2)
    fixed_sfr_w   = (0, 2)
    bit8_0=(0, 0);

define token data16 (16)
    dataw = (0, 15)
    uaddr16_data = (0, 15)
    a16_bit7 = (7, 7)
    a16_bit4_6 = (4, 6)
    a16_upper = (8, 15)
    a16_bits_11_15 = (11, 15)
    ext_sfr  = (0, 10)
    ext_sfrw = (0, 10)
    bit16_8_9 = (8, 9)
    ext_sfr_offset = (10, 15)
    saddr16 = (0, 15) signed
    a16_sfr_offset = (3, 15)
    a16_sfr_reg = (0, 2)
    a16w_sfr_reg = (0, 2)
    bit16_0=(0, 0);

define token data24 (24)
    uaddr20 = (0, 19);

@include "rl78_sfr.sinc"

attach names [ rbs_op_n ] [ RBS0 RBS1 RBS2 RBS3 ];

attach variables [ fixed_sfr ] [ SPL SPH PSW _ _ _ PMC MEM ];
attach variables [ fixed_sfr_w ] [ SP _ _ _ _ _ _ _ ];

#attach variables [ a16_sfr_reg ] [ SPL SPH PSW _ CS0 ES0 PMC MEM ];
attach variables [ a16_sfr_reg ] [ SPL SPH PSW _ _ _ PMC MEM ];
attach variables [ a16w_sfr_reg ] [ SP _ _ _ _ _ _ _ ];

define pcodeop todo;
define pcodeop halt;
define pcodeop stop;
define pcodeop invalid;

define pcodeop divwu;
define pcodeop machu;
define pcodeop mach;

define pcodeop disable_interrupts;
define pcodeop enable_interrupts;
define pcodeop segment;
