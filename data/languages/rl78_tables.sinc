
X:"X" is bank_mode=0 { export X0; }
X:"X" is bank_mode=1 { reg:1 = bank; export *[register]:1 reg; }

A:"A" is bank_mode=0 { export A0; }
A:"A" is bank_mode=1 { reg:1 = bank + 1; export *[register]:1 reg; }

C:"C" is bank_mode=0 { export C0; }
C:"C" is bank_mode=1 { reg:1 = bank + 2; export *[register]:1 reg; }

B:"B" is bank_mode=0 { export B0; }
B:"B" is bank_mode=1 { reg:1 = bank + 3; export *[register]:1 reg; }

E:"E" is bank_mode=0 { export E0; }
E:"E" is bank_mode=1 { reg:1 = bank + 4; export *[register]:1 reg; }

D:"D" is bank_mode=0 { export D0; }
D:"D" is bank_mode=1 { reg:1 = bank + 5; export *[register]:1 reg; }

L:"L" is bank_mode=0 { export L0; }
L:"L" is bank_mode=1 { reg:1 = bank + 6; export *[register]:1 reg; }

H:"H" is bank_mode=0 { export H0; }
H:"H" is bank_mode=1 { reg:1 = bank + 7; export *[register]:1 reg; }

AX:"AX" is bank_mode=0 { export AX0; }
AX:"AX" is bank_mode=1 { reg:1 = bank; export *[register]:2 reg; }

BC:"BC" is bank_mode=0 { export BC0; }
BC:"BC" is bank_mode=1 { reg:1 = bank + 2; export *[register]:2 reg; }

DE:"DE" is bank_mode=0 { export DE0; }
DE:"DE" is bank_mode=1 { reg:1 = bank + 4; export *[register]:2 reg; }

HL:"HL" is bank_mode=0 { export HL0; }
HL:"HL" is bank_mode=1 { reg:1 = bank + 6; export *[register]:2 reg; }

CS:"CS" is epsilon { export CS0; }

ES:"ES" is epsilon { export ES0; }

DREG_BYTE:^X is X & dreg_byte=0 { export X; }
DREG_BYTE:^A is A & dreg_byte=1 { export A; }
DREG_BYTE:^C is C & dreg_byte=2 { export C; }
DREG_BYTE:^B is B & dreg_byte=3 { export B; }
DREG_BYTE:^E is E & dreg_byte=4 { export E; }
DREG_BYTE:^D is D & dreg_byte=5 { export D; }
DREG_BYTE:^L is L & dreg_byte=6 { export L; }
DREG_BYTE:^H is H & dreg_byte=7 { export H; }

DREG_AXBC:^X is X & dreg_axbc=0 { export X; }
DREG_AXBC:^A is A & dreg_axbc=1 { export A; }
DREG_AXBC:^C is C & dreg_axbc=2 { export C; }
DREG_AXBC:^B is B & dreg_axbc=3 { export B; }

DREG_WORD:^AX is AX & dreg_word=0 { export AX; }
DREG_WORD:^BC is BC & dreg_word=1 { export BC; }
DREG_WORD:^DE is DE & dreg_word=2 { export DE; }
DREG_WORD:^HL is HL & dreg_word=3 { export HL; }

SREG2_BYTE:^X is X & sreg_byte=0 { export X; }
SREG2_BYTE:^A is A & sreg_byte=1 { export A; }
SREG2_BYTE:^C is C & sreg_byte=2 { export C; }
SREG2_BYTE:^B is B & sreg_byte=3 { export B; }
SREG2_BYTE:^E is E & sreg_byte=4 { export E; }
SREG2_BYTE:^D is D & sreg_byte=5 { export D; }
SREG2_BYTE:^L is L & sreg_byte=6 { export L; }
SREG2_BYTE:^H is H & sreg_byte=7 { export H; }

SKIP_TARGET: loc is skip_mode=1 [ loc = inst_next + 1; ] {
    export *[ram]:3 loc;
}

SKIP_TARGET: loc is skip_mode=2 [ loc = inst_next + 2; ] {
    export *[ram]:3 loc;
}

SKIP_TARGET: loc is skip_mode=3 [ loc = inst_next + 3; ] {
    export *[ram]:3 loc;
}

SKIP_TARGET: loc is skip_mode=4 [ loc = inst_next + 4; ] {
    export *[ram]:3 loc;
}

SKIP_TARGET: loc is skip_mode=5 [ loc = inst_next + 5; ] {
    export *[ram]:3 loc;
}

sfr_reg_byte: ext_sfr is ext_sfr & a16_bits_11_15=0 {
    export ext_sfr;
}

sfr_reg_word: ext_sfrw is ext_sfrw & a16_bits_11_15=0 & bit16_0=0 {
    export ext_sfrw;
}

u8: "#"data is data {
    export *[const]:1 data;
}

u16: "#"dataw is dataw {
    export *[const]:2 dataw;
}

near_offset8: uaddr8 is uaddr8 {
    export *[const]:2 uaddr8;
}

far_offset8: uaddr8 is uaddr8 {
    export *[const]:3 uaddr8;
}

saddr_val: val is uaddr8 [val = 0xFE00 + uaddr8;] { export *[const]:3 val; }

saddr: uaddr8 is uaddr8 & saddr_val {
    export *[near]:1 saddr_val;
}

saddrp: uaddr8 is uaddr8 & saddr_val & bit8_0=0 {
    export *[near]:2 saddr_val;
}

uaddr16: uaddr16_data is uaddr16_data { export *[const]:2 uaddr16_data; }

addr16: uaddr16 is es_prefix=0 & uaddr16 {
    export *[near]:1 uaddr16;
}

addr16: ES:"!"uaddr16 is es_prefix=1 & uaddr16 & ES {
    local loc:3 = segment(ES, uaddr16);
    export *[ram]:1 loc;
}

addr16w: uaddr16 is uaddr16 & bit16_0=0 {
    export *[near]:2 uaddr16;
}

addr16w: a16w_sfr_reg is es_prefix=0 & a16w_sfr_reg & a16_sfr_offset=0x1fff & bit16_0=0 {
    export a16w_sfr_reg;
}

addr16w: ES:"!"uaddr16 is es_prefix=1 & uaddr16 & ES & bit16_0=0 {
    local loc:3 = segment(ES, uaddr16);
    export *[ram]:2 loc;
}

addr16: sfr_reg_byte is es_prefix=0 & sfr_reg_byte {
    export sfr_reg_byte;
}

addr16w: sfr_reg_word is es_prefix=0 & sfr_reg_word {
    export sfr_reg_word;
}

addr20: "!!"uaddr20 is uaddr20 {
    export *[ram]:3 uaddr20;
}

sfr: fixed_sfr is fixed_sfr & fixed_sfr_offset=0x1f {
    export fixed_sfr;
}

sfr: sfr_byte is sfr_byte {
    export sfr_byte;
}

sfrp: fixed_sfr_w is fixed_sfr_w & fixed_sfr_offset=0x1f {
    export fixed_sfr_w;
}

sfrp: sfr_word is sfr_word {
    export sfr_word;
}

jdisp8: "$"loc is saddr8 [ loc = inst_next + saddr8; ] {
    export *[ram]:3 loc;
}

jaddr16: "!"uaddr16 is uaddr16 {
    export *[ram]:3 uaddr16;
}

jdisp16: "$!"loc is saddr16 [ loc = inst_next + saddr16; ] {
    export *[ram]:3 loc;
}

# Register Ponter tokens - [r]

AddrDE: [DE] is es_prefix=0 & DE {
    export *[near]:1 DE;
}

AddrDE: ES:[DE] is es_prefix=1 & DE & ES {
    local loc:3 = segment(ES, DE);
    export *[ram]:1 loc;
}

AddrDEW: [DE] is es_prefix=0 & DE {
    export *[near]:2 DE;
}

AddrDEW: ES:[DE] is es_prefix=1 & DE & ES {
    local loc:3 = segment(ES, DE);
    export *[ram]:2 loc;
}

AddrDEOffset: [DE] is es_prefix=0 & DE & uaddr8=0 {
    export *[near]:1 DE;
}

AddrDEOffset: ES:[DE] is es_prefix=1 & DE & uaddr8=0 & ES {
    local loc:3 = segment(ES, DE);
    export *[ram]:1 loc;
}

AddrDEOffsetW: [DE] is es_prefix=0 & DE & uaddr8=0 {
    export *[near]:2 DE;
}

AddrDEOffset: [DE+near_offset8] is es_prefix=0 & DE & near_offset8 {
    loc = DE + near_offset8;
    export *[near]:1 loc;
}

AddrDEOffset: ES:[DE+far_offset8] is es_prefix=1 & DE & far_offset8 & ES {
    local loc:3 = segment(ES, DE) + far_offset8;
    export *[ram]:1 loc;
}

AddrDEOffsetW: [DE+near_offset8] is es_prefix=0 & DE & near_offset8 {
    loc = DE + near_offset8;
    export *[near]:2 loc;
}

AddrDEOffsetW: ES:[DE] is es_prefix=1 & DE & data=0 & ES {
    local loc:3 = segment(ES, DE);
    export *[ram]:2 loc;
}

AddrDEOffsetW: ES:[DE+far_offset8] is es_prefix=1 & DE & far_offset8 & data!=0 & ES {
    local loc:3 = segment(ES, DE) + far_offset8;
    export *[ram]:2 loc;
}

AddrHL: [HL] is HL & es_prefix=0 {
    export *[near]:1 HL;
}

AddrHL: ES:[HL] is HL & es_prefix=1 & ES {
    local loc:3 = segment(ES, HL);
    export *[ram]:1 loc;
}

AddrHLW: [HL] is es_prefix=0 & HL {
    export *[near]:2 HL;
}

AddrHLW: ES:[HL] is es_prefix=1 & HL & ES {
    local loc:3 = segment(ES, HL);
    export *[ram]:2 loc;
}

AddrHLOffset: [HL] is es_prefix=0 & HL & uaddr8=0 {
    export *[near]:1 HL;
}

AddrHLOffset: ES:[HL] is es_prefix=1 & HL & uaddr8=0 & ES {
    local loc:3 = segment(ES, HL);
    export *[ram]:1 loc;
}

AddrHLOffset: [HL+near_offset8] is es_prefix=0 & HL & near_offset8 {
    loc = HL + near_offset8;
    export *[near]:1 loc;
}

AddrHLOffset: ES:[HL+far_offset8] is es_prefix=1 & HL & far_offset8 & ES {
    local loc:3 = segment(ES, HL) + far_offset8;
    export *[ram]:1 loc;
}

AddrHLOffsetW: [HL] is es_prefix=0 & HL & uaddr8=0 {
    export *[near]:2 HL;
}

AddrHLOffsetW: [HL+near_offset8] is es_prefix=0 & HL & near_offset8 {
    loc = HL + near_offset8;
    export *[near]:2 loc;
}

AddrHLOffsetW: ES:[HL+far_offset8] is es_prefix=1 & HL & far_offset8 & ES {
    local loc:3 = segment(ES, HL) + far_offset8;
    export *[ram]:2 loc;
}

AddrHLOffsetW: ES:[HL] is es_prefix=1 & HL & uaddr8=0 & ES {
    local loc:3 = segment(ES, HL);
    export *[ram]:2 loc;
}

AddrHLOffsetB: [HL+B] is es_prefix=0 & HL & B {
    loc = HL + zext(B);
    export *[near]:1 loc;
}

AddrHLOffsetB: ES:[HL+B] is es_prefix=1 & HL & B & ES {
    local loc:3 = segment(ES, HL) + zext(B);
    export *[ram]:1 loc;
}

AddrHLOffsetC: [HL+C] is es_prefix=0 & HL & C {
    loc = HL + zext(C);
    export *[near]:1 loc;
}

AddrHLOffsetC: ES:[HL+C] is es_prefix=1 & HL & C & ES {
    local loc:3 = segment(ES, HL) + zext(C);
    export *[ram]:1 loc;
}

AddrWordOffsetB: uaddr16[B] is es_prefix=0 & uaddr16 & B {
    loc = uaddr16 + zext(B);
    export *[near]:1 loc;
}

AddrWordOffsetB: ES:uaddr16[B] is es_prefix=1 & uaddr16 & B & ES {
    local loc:3 = segment(ES, uaddr16) + zext(B);
    export *[ram]:1 loc;
}

AddrWordOffsetBW: uaddr16[B] is es_prefix=0 & uaddr16 & B {
    loc = uaddr16 + zext(B);
    export *[near]:2 loc;
}

AddrWordOffsetBW: ES:uaddr16[B] is es_prefix=1 & uaddr16 & B & ES {
    local loc:3 = segment(ES, uaddr16) + zext(B);
    export *[ram]:2 loc;
}

AddrWordOffsetC: uaddr16[C] is es_prefix=0 & uaddr16 & C {
    loc = uaddr16 + zext(C);
    export *[near]:1 loc;
}

AddrWordOffsetC: ES:uaddr16[C] is es_prefix=1 & uaddr16 & C & ES {
    local loc:3 = segment(ES, uaddr16) + zext(C);
    export *[ram]:1 loc;
}

AddrWordOffsetCW: uaddr16[C] is es_prefix=0 & uaddr16 & C {
    loc = uaddr16 + zext(C);
    export *[near]:2 loc;
}

AddrWordOffsetCW: ES:uaddr16[C] is es_prefix=1 & uaddr16 & C & ES {
    local loc:3 = segment(ES, uaddr16) + zext(C);
    export *[ram]:2 loc;
}

AddrWordOffsetBC: uaddr16[BC] is es_prefix=0 & uaddr16 & BC {
    loc = uaddr16 + zext(BC);
    export *[near]:1 loc;
}

AddrWordOffsetBC: ES:uaddr16[BC] is es_prefix=1 & uaddr16 & BC & ES {
    local loc:3 = segment(ES, uaddr16) + zext(BC);
    export *[ram]:1 loc;
}

AddrWordOffsetBCW: uaddr16[BC] is es_prefix=0 & uaddr16 & BC {
    loc = uaddr16 + zext(BC);
    export *[near]:2 loc;
}

AddrWordOffsetBCW: ES:uaddr16[BC] is es_prefix=1 & uaddr16 & BC & ES {
    local loc:3 = segment(ES, uaddr16 + zext(BC));
    export *[ram]:2 loc;
}

AddrSPOffset: [SP] is uaddr8=0 & SP {
    export *[near]:1 SP;
}

AddrSPOffsetW: [SP] is uaddr8=0 & SP {
    export *[near]:2 SP;
}

AddrSPOffset: [SP+near_offset8] is near_offset8 & SP {
    local loc:2 = SP + near_offset8;
    export *[near]:1 loc;
}

AddrSPOffsetW: [SP+near_offset8] is near_offset8 & SP {
    local loc:2 = SP + near_offset8;
    export *[near]:2 loc;
}


